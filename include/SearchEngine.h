#include <string>
#include <cstdint>
#include <unordered_map>
#include <vector>
#include <filesystem>

#include "FileIndex.h"
#include "StopFilter.h"

class SearchEngine {
public:
    using Offset = uint32_t;

    /**
     * @brief Construct a new Search Engine:: Search Engine object
     * @param dir The target directory to search in.
     *
     * This directory should contain a index folder built using SearchEngine::gen_index(_large).
     * The index folder's name is specified by macro BASE_DIR in utils.h.
     */
    SearchEngine(const std::filesystem::path& dir);

    ~SearchEngine() { delete stop_filter; } // delete stop_filter to avoid memory leak

    /**
     * @brief Search for a word in the index.
     * @param word The word to search for.
     * @param output The output stream to write the result to.
     * @param threshold The threshold for the search result.
     *
     * Threshold is a ratio from 0.0 to 1.0. It represents the percentage of terms that should be used in searching. Default value is 1.0
     * For example, if threshold is 0.8, only the top 80% less frequent terms will be used in searching.
     */
    void search(const std::string& query, std::ostream& output, double threshold = 1.0) const;

    /**
     * @brief Search for a word in the index.
     * @param word The word to search for.
     * @param output The output stream to write the result to.
     * @return The entry of the word in the index. Retrived from the file.
     */
    FileIndex::Entry search_word(const std::string& word, std::ostream& output) const;

    /**
     * @brief Generate an index for the target directory.
     * @param dir The target directory to index.
     * @param stop_filter The stop filter to use. nullptr if no stop filter is needed.
     * @param quiet If true, do not print any output to stdout.
     */
    static void gen_index(const std::filesystem::path& dir, StopFilter* stop_filter = nullptr, bool quiet = false);

    /**
     * @brief BONUS: Generate an index for the target directory, but do most operations on dick to prevent running out of memory.
     * @param dir The target directory to index.
     * @param stop_filter The stop filter to use. nullptr if no stop filter is needed.
     * @param quiet If true, do not print any output to stdout.
     */
    static void gen_index_large(const std::filesystem::path& dir, StopFilter* stop_filter = nullptr, bool quiet = false);
private:
    /**
     * @brief Merge the index files generated by gen_index_large.
     * @param dir The target directory to index.
     * @param l The left index of the range to merge.
     * @param r The right index of the range to merge.
     * @param quiet If true, do not print any output to stdout.
     *
     * Merge a series of index file to one. The algorithm is similar to merge sort.
     * It uses recursion to split the range into two halves and merge them.
     */
    static void merge_index(const std::filesystem::path& dir, std::size_t l, std::size_t r, bool quiet = false);

    std::filesystem::path dir; ///< The target directory to search in.
    std::vector<std::string> file_list; ///< The list of files in the target directory.
    std::unordered_map <std::string, Offset> words; ///< The map of words to their offsets in the index file.
    StopFilter* stop_filter; ///< The stop filter to use.
};